name: Deploy Cloudflare Worker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: private1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Get zone name and ensure subdomain exists
        id: ensure-dns
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          set -e
          SUBDOMAIN="1pwim"
          
          echo "Getting zone name..."
          ZONE_NAME=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" | jq -r '.result.name')

          echo "ZONE_NAME=${ZONE_NAME}" >> $GITHUB_ENV

          FQDN="${SUBDOMAIN}.${ZONE_NAME}"
          echo "Checking if DNS record $FQDN exists..."

          RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/dns_records?name=${FQDN}" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')

          if [ "$RECORD_ID" = "null" ]; then
            echo "Creating CNAME $SUBDOMAIN → ${SUBDOMAIN}.workers.dev"
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/dns_records" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "CNAME",
                "name": "'"${SUBDOMAIN}"'",
                "content": "'"${SUBDOMAIN}.workers.dev"'",
                "ttl": 300,
                "proxied": true
              }'
          else
            echo "✅ DNS record already exists."
          fi

      - name: Deploy to Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          ZONE_NAME: ${{ env.ZONE_NAME }}
        run: npm run deploy
